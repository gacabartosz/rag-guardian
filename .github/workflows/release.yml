name: Release

on:
  push:
    tags:
      - 'v*.*.*'  # Trigger on version tags like v1.0.0, v1.1.0, etc.

permissions:
  contents: write
  packages: write

jobs:
  test:
    name: Run tests before release
    runs-on: ubuntu-latest

    steps:
    - uses: actions/checkout@v4

    - name: Set up Python
      uses: actions/setup-python@v6
      with:
        python-version: "3.11"

    - name: Install Poetry
      uses: snok/install-poetry@v1
      with:
        version: 1.7.1

    - name: Install dependencies
      run: poetry install

    - name: Run tests
      run: poetry run pytest

    - name: Run linting
      run: |
        poetry run ruff check rag_guardian tests
        poetry run black --check rag_guardian tests

  build:
    name: Build distribution
    needs: test
    runs-on: ubuntu-latest

    steps:
    - uses: actions/checkout@v4

    - name: Set up Python
      uses: actions/setup-python@v6
      with:
        python-version: "3.11"

    - name: Install Poetry
      uses: snok/install-poetry@v1
      with:
        version: 1.7.1

    - name: Build package
      run: poetry build

    - name: Store distribution packages
      uses: actions/upload-artifact@v3
      with:
        name: python-package-distributions
        path: dist/

  publish-to-pypi:
    name: Publish to PyPI
    needs: build
    runs-on: ubuntu-latest

    environment:
      name: pypi
      url: https://pypi.org/p/rag-guardian

    steps:
    - name: Download distributions
      uses: actions/download-artifact@v3
      with:
        name: python-package-distributions
        path: dist/

    - name: Publish to PyPI
      uses: pypa/gh-action-pypi-publish@release/v1
      with:
        password: ${{ secrets.PYPI_API_TOKEN }}

  create-github-release:
    name: Create GitHub Release
    needs: publish-to-pypi
    runs-on: ubuntu-latest

    steps:
    - uses: actions/checkout@v4

    - name: Download distributions
      uses: actions/download-artifact@v3
      with:
        name: python-package-distributions
        path: dist/

    - name: Extract version from tag
      id: get_version
      run: echo "VERSION=${GITHUB_REF#refs/tags/v}" >> $GITHUB_OUTPUT

    - name: Extract changelog for version
      id: changelog
      run: |
        # Extract changelog section for this version
        VERSION=${{ steps.get_version.outputs.VERSION }}
        echo "Extracting changelog for version $VERSION"

        # Simple extraction - you might want to enhance this
        echo "CHANGELOG<<EOF" >> $GITHUB_OUTPUT
        echo "## What's Changed in v$VERSION" >> $GITHUB_OUTPUT
        echo "" >> $GITHUB_OUTPUT
        echo "See full changelog: [CHANGELOG.md](https://github.com/gacabartosz/rag-guardian/blob/main/CHANGELOG.md)" >> $GITHUB_OUTPUT
        echo "" >> $GITHUB_OUTPUT
        echo "## Installation" >> $GITHUB_OUTPUT
        echo '```bash' >> $GITHUB_OUTPUT
        echo "pip install rag-guardian==$VERSION" >> $GITHUB_OUTPUT
        echo '```' >> $GITHUB_OUTPUT
        echo "EOF" >> $GITHUB_OUTPUT

    - name: Create GitHub Release
      uses: softprops/action-gh-release@v1
      with:
        files: dist/*
        body: ${{ steps.changelog.outputs.CHANGELOG }}
        draft: false
        prerelease: false
        generate_release_notes: true
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

    - name: Tweet about release (optional)
      run: |
        echo "ðŸŽ‰ RAG Guardian v${{ steps.get_version.outputs.VERSION }} released!"
        echo "You can add Twitter/X integration here using secrets.TWITTER_API_KEY"
