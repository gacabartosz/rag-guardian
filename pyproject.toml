[tool.poetry]
name = "rag-guardian"
version = "0.1.0"
description = "Production-grade quality assurance framework for RAG systems"
authors = ["Bartosz Gaca <gacabartosz@gmail.com>"]
license = "MIT"
readme = "README.md"
homepage = "https://github.com/gacabartosz/rag-guardian"
repository = "https://github.com/gacabartosz/rag-guardian"
documentation = "https://github.com/gacabartosz/rag-guardian/docs"
keywords = [
    "rag",
    "llm",
    "testing",
    "evaluation",
    "qa",
    "retrieval-augmented-generation",
    "langchain",
    "llamaindex",
    "ai",
    "machine-learning"
]
classifiers = [
    "Development Status :: 3 - Alpha",
    "Intended Audience :: Developers",
    "License :: OSI Approved :: MIT License",
    "Programming Language :: Python :: 3",
    "Programming Language :: Python :: 3.10",
    "Programming Language :: Python :: 3.11",
    "Programming Language :: Python :: 3.12",
    "Topic :: Software Development :: Testing",
    "Topic :: Scientific/Engineering :: Artificial Intelligence",
]
packages = [{include = "rag_guardian"}]

[tool.poetry.dependencies]
python = "^3.10"

# Core dependencies
pydantic = "^2.0"
click = "^8.1.7"
python-dotenv = "^1.0.0"
tenacity = "^8.2.3"
aiohttp = "^3.9.0"
asyncio = "*"

# RAG evaluation
ragas = "^0.1.0"
langchain = "^0.1.0"
langchain-community = "^0.0.20"
langchain-openai = "^0.0.5"

# Embeddings and similarity
sentence-transformers = "^2.3.1"
scikit-learn = "^1.4.0"
numpy = "^1.26.0"
scipy = "^1.12.0"

# LLM clients
litellm = "^1.20.0"
openai = "^1.12.0"
tiktoken = "^0.5.2"

# Storage
sqlalchemy = "^2.0.25"
alembic = "^1.13.1"
asyncpg = "^0.29.0"
diskcache = "^5.6.3"

# Reporting
jinja2 = "^3.1.3"
rich = "^13.7.0"
tabulate = "^0.9.0"

# Configuration
pyyaml = "^6.0.1"
jsonschema = "^4.21.0"

# Optional integrations (extras)
llamaindex = {version = "^0.9.0", optional = true}
prometheus-client = {version = "^0.19.0", optional = true}
slack-sdk = {version = "^3.26.0", optional = true}

[tool.poetry.group.dev.dependencies]
# Testing
pytest = "^8.0.0"
pytest-asyncio = "^0.23.4"
pytest-cov = "^4.1.0"
pytest-mock = "^3.12.0"
httpx = "^0.26.0"

# Linting and formatting
black = "^24.1.1"
ruff = "^0.2.0"
mypy = "^1.8.0"
isort = "^5.13.2"

# Type stubs
types-pyyaml = "^6.0.12"
types-jsonschema = "^4.21.0"

# Documentation
mkdocs = "^1.5.3"
mkdocs-material = "^9.5.6"
mkdocstrings = {extras = ["python"], version = "^0.24.0"}

[tool.poetry.extras]
llamaindex = ["llamaindex"]
monitoring = ["prometheus-client", "slack-sdk"]
all = ["llamaindex", "prometheus-client", "slack-sdk"]

[tool.poetry.scripts]
rag-guardian = "rag_guardian.__main__:main"

[tool.black]
line-length = 100
target-version = ['py310', 'py311', 'py312']
include = '\.pyi?$'
extend-exclude = '''
/(
  # directories
  \.eggs
  | \.git
  | \.hg
  | \.mypy_cache
  | \.tox
  | \.venv
  | build
  | dist
)/
'''

[tool.ruff]
line-length = 100
target-version = "py310"
select = [
    "E",   # pycodestyle errors
    "W",   # pycodestyle warnings
    "F",   # pyflakes
    "I",   # isort
    "C",   # flake8-comprehensions
    "B",   # flake8-bugbear
    "UP",  # pyupgrade
]
ignore = [
    "E501",  # line too long (black handles this)
    "B008",  # do not perform function calls in argument defaults
    "C901",  # too complex
]

[tool.ruff.per-file-ignores]
"__init__.py" = ["F401"]

[tool.mypy]
python_version = "3.10"
warn_return_any = true
warn_unused_configs = true
disallow_untyped_defs = true
disallow_incomplete_defs = true
check_untyped_defs = true
disallow_untyped_decorators = false
no_implicit_optional = true
warn_redundant_casts = true
warn_unused_ignores = true
warn_no_return = true
follow_imports = "normal"
ignore_missing_imports = true

[tool.pytest.ini_options]
minversion = "8.0"
addopts = "-ra -q --strict-markers --cov=rag_guardian --cov-report=term-missing --cov-report=html"
testpaths = ["tests"]
python_files = ["test_*.py", "*_test.py"]
python_classes = ["Test*"]
python_functions = ["test_*"]
asyncio_mode = "auto"

[tool.coverage.run]
source = ["rag_guardian"]
omit = [
    "*/tests/*",
    "*/test_*.py",
    "*/__init__.py",
]

[tool.coverage.report]
exclude_lines = [
    "pragma: no cover",
    "def __repr__",
    "raise AssertionError",
    "raise NotImplementedError",
    "if __name__ == .__main__.:",
    "if TYPE_CHECKING:",
    "@abstractmethod",
]

[build-system]
requires = ["poetry-core"]
build-backend = "poetry.core.masonry.api"
